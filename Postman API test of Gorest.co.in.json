{
	"info": {
		"_postman_id": "630d0653-7de7-4d68-a4fb-0dc3aab93646",
		"name": "Gorest.co.in",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21647727"
	},
	"item": [
		{
			"name": "Create a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Created user have all required data\", function () {\r",
							"    pm.response.to.have.jsonBody(\"id\");\r",
							"    pm.response.to.have.jsonBody(\"name\");\r",
							"    pm.response.to.have.jsonBody(\"email\");\r",
							"    pm.response.to.have.jsonBody(\"gender\");\r",
							"    pm.response.to.have.jsonBody(\"status\");\r",
							"});\r",
							"\r",
							"pm.test(\"User created with correct gender and status data\", () => {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(response.gender).to.eql(\"male\");\r",
							"    pm.expect(response.status).to.eql('inactive');\r",
							"})\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"inactive\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLGorest}}/users",
					"host": [
						"{{URLGorest}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "list of users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const number = response.length;\r",
							"const UserId = response[Math.floor(Math.random()*number)];\r",
							"pm.globals.set(\"UserId\", UserId.id);\r",
							"\r",
							"pm.test(\"Response has 10 users\")\r",
							"    pm.expect(number).to.equal(10);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLGorest}}/users",
					"host": [
						"{{URLGorest}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.test(\"User Id is correct\", function () {\r",
							"    pm.expect(response.id).to.eql(pm.globals.get(\"UserId\"))\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLGorest}}/users/{{UserId}}",
					"host": [
						"{{URLGorest}}"
					],
					"path": [
						"users",
						"{{UserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Email Data are correctly updated\", function () {\r",
							"    pm.expect(response.email).to.eql(\"Test@zmiana.pl\")\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"Test@zmiana.pl\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLGorest}}/users/{{UserId}}",
					"host": [
						"{{URLGorest}}"
					],
					"path": [
						"users",
						"{{UserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URLGorest}}/users/{{UserId}}",
					"host": [
						"{{URLGorest}}"
					],
					"path": [
						"users",
						"{{UserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User has been deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User do not exist\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const response = pm.response.json()\r",
							"pm.test(\"Message pops up\", function () {\r",
							"    pm.response.to.have.jsonBody(\"message\");\r",
							"    pm.expect(response.message).to.eql(\"Resource not found\")\r",
							"})\r",
							"\r",
							"pm.globals.unset(\"UserId\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLGorest}}/users/{{UserId}}",
					"host": [
						"{{URLGorest}}"
					],
					"path": [
						"users",
						"{{UserId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Token",
			"value": "2e5842f4e858ee814096bce0cef8d6e9a5f428a10704fabb8fdc51f91643464b",
			"type": "string"
		},
		{
			"key": "URLGorest",
			"value": "https://gorest.co.in/public/v2",
			"type": "string"
		}
	]
}
